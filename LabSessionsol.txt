Table Scripts

create database if not exists `order-directory` ;

use `order-directory`;

-- 1)	You are required to create tables for supplier,customer,category,product,productDetails,order,rating to store the data for the E-commerce with the schema definition given below.
-- Supplier(SUPP_ID,SUPP_NAME,SUPP_CITY,SUPP_PHONE)
create table if not exists `supplier`(
	`SUPP_ID` int primary key,
    `SUPP_NAME` varchar(50) ,
	`SUPP_CITY` varchar(50),
	`SUPP_PHONE` varchar(10)
);

-- Customer(CUS__ID,CUS_NAME,CUS_PHONE,CUS_CITY,CUS_GENDER)
create table if not exists `customer` (
	`CUS_ID` int not null,
	`CUS_NAME` varchar(20) null default null,
	`CUS_PHONE` varchar(10),
	`CUS_CITY` varchar(30) ,
	`CUS_GENDER` CHAR,
	primary key (`CUS_ID`)
);

-- Category(CAT_ID,CAT_NAME)
create table if not exists `category` (
	`CAT_ID` int not null,
	`CAT_NAME` varchar(20) null default null,
	primary key (`CAT_ID`)
);

-- Product(PRO_ID,PRO_NAME,PRO_DESC,CAT_ID)
create table if not exists `product` (
	`PRO_ID` int not null,
	`PRO_NAME` varchar(20) null default null,
	`PRO_DESC` varchar(60) null default null,
	`CAT_ID` int not null,
	primary key (`PRO_ID`),
	foreign key (`CAT_ID`) references category(`CAT_ID`)
);

-- ProductDetails(PROD_ID,PRO_ID,SUPP_ID,PRICE)
 create table if not exists `product_details` (
	`PROD_ID` int not null,
	`PRO_ID` int not null,
	`SUPP_ID` int not null,
	`PROD_PRICE` int not null,
	primary key (`PROD_ID`),
	foreign key (`PRO_ID`) references product(`PRO_ID`),
	foreign key (`SUPP_ID`) references supplier(`SUPP_ID`)
);

-- Order(ORD_ID,ORD_AMOUNT,ORD_DATE,CUS_ID,PROD_ID)
create table if not exists `order` (
  `ORD_ID` int not null,
  `ORD_AMOUNT` int not null,
  `ORD_DATE` date,
  `CUS_ID` int not null,
  `PROD_ID` int not null,
  primary key (`ORD_ID`),
  foreign key (`CUS_ID`) references customer(`CUS_ID`),
  foreign key (`PROD_ID`) references product_details(`PROD_ID`)
);

-- Rating(RAT_ID,CUS_ID,SUPP_ID,RAT_RATSTARS)
create table if not exists `rating` (
	`RAT_ID` int not null,
	`CUS_ID` int not null,
	`SUPP_ID` int not null,
	`RAT_RATSTARS` int not null,
	primary key (`RAT_ID`),
	foreign key (`SUPP_ID`) references supplier(`SUPP_ID`),
	foreign key (`CUS_ID`) references customer(`CUS_ID`)
  );

Insert Scripts:

insert into `supplier` values(1,"Rajesh Retails","Delhi",'1234567890');
insert into `supplier` values(2,"Appario Ltd.","Mumbai",'2589631470');
insert into `supplier` values(3,"Knome products","Banglore",'9785462315');
insert into `supplier` values(4,"Bansal Retails","Kochi",'8975463285');
insert into `supplier` values(5,"Mittal Ltd.","Lucknow",'7898456532');

insert into `CUSTOMER` values(1,"AAKASH",'9999999999',"DELHI",'M');
insert into `CUSTOMER` values(2,"AMAN",'9785463215',"NOIDA",'M');
insert into `CUSTOMER` values(3,"NEHA",'9999999999',"MUMBAI",'F');
insert into `CUSTOMER` values(4,"MEGHA",'9994562399',"KOLKATA",'F');
insert into `CUSTOMER` values(5,"PULKIT",'7895999999',"LUCKNOW",'M');

insert into `CATEGORY` values(1,"BOOKS");
insert into `CATEGORY` values(2,"GAMES");
insert into `CATEGORY` values(3,"GROCERIES");
insert into `CATEGORY` values(4,"ELECTRONICS");
insert into `CATEGORY` values(5,"CLOTHES");

insert into `PRODUCT` values(1,"GTA V","DFJDJFDJFDJFDJFJF",2);
insert into `PRODUCT` values(2,"TSHIRT","DFDFJDFJDKFD",5);
insert into `PRODUCT` values(3,"ROG LAPTOP","DFNTTNTNTERND",4);
insert into `PRODUCT` values(4,"OATS","REURENTBTOTH",3);
insert into `PRODUCT` values(5,"HARRY POTTER","NBEMCTHTJTH",1);

insert into `PRODUCT_DETAILS` values(1,1,2,1500);
insert into `PRODUCT_DETAILS` values(2,3,5,30000);
insert into `PRODUCT_DETAILS` values(3,5,1,3000);
insert into `PRODUCT_DETAILS` values(4,2,3,2500);
insert into `PRODUCT_DETAILS` values(5,4,1,1000);

insert into `ORDER` values (50,2000,"2021-10-06",2,1);
insert into `ORDER` values(20,1500,"2021-10-12",3,5);
insert into `ORDER` values(25,30500,"2021-09-16",5,2);
insert into `ORDER` values(26,2000,"2021-10-05",1,1);
insert into `ORDER` values(30,3500,"2021-08-16",4,3);

insert into `RATING` values(1,2,2,4);
insert into `RATING` values(2,3,4,3);
insert into `RATING` values(3,5,1,5);
insert into `RATING` values(4,1,3,2);
insert into `RATING` values(5,4,5,4);


Queries ans:
3)	Display the number of the customer group by their genders who have placed any order of amount greater than or equal to Rs.3000.
select cus_gender, COUNT(*)
from 
	`order`
    inner join
    customer
    on `order`.cus_id = customer.cus_id
where ord_amount >= 3000
group by customer.cus_gender;

-- 4)	Display all the orders along with the product name ordered by a customer having Customer_Id=2.
-- HINT: Join `order`, product_details, product (Use the respective foreign keys to join)
select *
from
	`order`
    inner join
    product_details
    on `order`.prod_id = product_details.prod_id
    inner join
    product
    on product_details.pro_id = product.pro_id
where cus_id = 2;


-- 5)	Display the Supplier details who can supply more than one product.
-- 5a) Find out supp_id of suppliers supplying more than 1 product
select supp_id
from product_details
group by supp_id
having count(*) > 1;

-- 5b) Use suppliers obtained from the previous query to get the supplier details
-- EXERCISE
-- HINT: Use IN in the WHERE clause and provide the result of previous query (5a) to IN
select *
from supplier
where supp_id in (
	select supp_id
	from product_details
	group by supp_id
	having count(*) > 1
);


-- 6)	Find the category of the product whose order amount is minimum.
select *
from
	`order`
    inner join product_details on product_details.prod_id = `order`.prod_id
    inner join product on product_details.pro_id = product.pro_id
    inner join category on product.cat_id = category.cat_id
order by ord_amount limit 1;


-- 7)	Display the Id and Name of the Product ordered after “2021-10-05”.
-- filter by (WHERE) ord_date > "2021-10-05"
-- join with product_details and product to get the product name and id
select ord_id, ord_date, product.pro_id, pro_name, pro_desc
from 
	`order`
	inner join product_details on `order`.prod_id = product_details.prod_id
    inner join product on product_details.pro_id = product.pro_id
where ord_date > "2021-10-05";


-- 8)	Print the top 3 supplier name and id and their rating on the basis of their rating along with the customer name who has given the rating.
select supplier.supp_id, supp_name, cus_name, rating.rat_ratstars
from 
	rating
    inner join supplier on supplier.supp_id = rating.supp_id
    inner join customer on customer.cus_id = rating.cus_id
order by rating.rat_ratstars desc limit 3;


-- 9)	Display customer name and gender whose names start or end with character 'A'.
-- HINT: WHERE cus_name LIKE 'A%' OR cus_name LIKE '%A'
select cus_name, cus_gender
from customer
where cus_name like 'A%' or cus_name like '%A';


-- 10)	Display the total order amount of the male customers.
select cus_gender, sum(ord_amount)
from `order` inner join customer on `order`.cus_id = customer.cus_id
where cus_gender = 'M';


-- 11)	Display all the Customers left outer join with  the orders.
-- join customer with order and display all fields - use "left outer join" instead of "inner join"
-- left outer join ensures that records in the table on the left ALWAYS appear in the result
-- eg. Pallavi who is a new customer and has NO order still apeears in the result

-- add a new customer Pallavi - initially she has NO order
insert into customer(cus_id, cus_name, cus_phone, cus_city, cus_gender) values(6, 'Pallavi', 1234567890, 'Bangalore', 'F');

-- solution
select *
from customer left outer join `order` on `order`.cus_id = customer.cus_id;


-- 12)	 Create a stored procedure to display the Rating for a Supplier if any along with the Verdict on that rating if any like if rating >4 then “Genuine Supplier” if rating >2 “Average Supplier” else “Supplier should not be considered”.
-- Right click on order-directory -> Stored Procedure -> Create Stored Procedure
CREATE DEFINER=`root`@`localhost` PROCEDURE `categorize_supplier`()
BEGIN
	-- Verdict on that rating if any like
	-- 			if rating > 4 then "Genuine Supplier"
	-- 			if rating > 2 "Average Supplier"
	--          else "Supplier should not be considered"
	select supplier.supp_id, supp_name, rat_ratstars, 
    case
		when rat_ratstars > 4 then "Genuine Supplier"
        when rat_ratstars > 2 then "Average Supplier"
        else "Supplier should not be considered"
	end as verdict
    from rating inner join supplier on rating.supp_id = supplier.supp_id;
END